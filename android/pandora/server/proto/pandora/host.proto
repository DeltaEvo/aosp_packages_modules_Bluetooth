syntax = "proto3";

option java_outer_classname = "HostProto";

package pandora;

import "google/protobuf/empty.proto";

// Service to trigger Bluetooth Host procedures
//
// At startup, the Host must be in BR/EDR connectable mode
// (see GAP connectability modes)
service Host {
  // Hard reset the host.
  // **After** responding to this command, the gRPC server should loose
  // all its state.
  // This is comparable to a process restart or an hardware reset.
  // The gRPC server might take some time to be available after
  // this command.
  rpc HardReset(google.protobuf.Empty) returns (google.protobuf.Empty);
  // Soft reset the host by performing an HCI reset. Previous bonds must
  // not be removed and the gRPC server must not be restarted.
  rpc SoftReset(google.protobuf.Empty) returns (google.protobuf.Empty);
  // Read the local Bluetooth device address.
  // This should return the same value as a Read BD_ADDR HCI command.
  rpc ReadLocalAddress(google.protobuf.Empty) returns (ReadLocalAddressResponse);
  // Create an ACL BR/EDR connection to a peer.
  // This should send a CreateConnection on the HCI level.
  // If the two devices have not established a previous bond,
  // the peer must be discoverable.
  rpc Connect(ConnectRequest) returns (ConnectResponse);
  // Get an active ACL BR/EDR connection to a peer.
  rpc GetConnection(GetConnectionRequest) returns (GetConnectionResponse);
  // Wait for an ACL BR/EDR connection from a peer.
  rpc WaitConnection(WaitConnectionRequest) returns (WaitConnectionResponse);
  // Disconnect an ACL BR/EDR connection. The Connection must not be reused afterwards.
  rpc Disconnect(DisconnectRequest) returns (DisconnectResponse);
  // Create a LE connection.
  rpc ConnectLE(ConnectLERequest) returns (ConnectLEResponse);
  // Disconnect ongoing LE connection.
  rpc DisconnectLE(DisconnectLERequest) returns (google.protobuf.Empty);
  // Listen to pairing events.
  // This is handled independently from connections for several reasons:
  // - Pairing can be triggered at any time and multiple times during the
  //   lifetime of a connection (this also explains why this is a stream).
  // - In BR/EDR, the specification allows for a device to authenticate before
  //   connecting when in security mode 3 (link level enforced security).
  rpc OnPairing(stream PairingEventAnswer) returns (stream PairingEvent);
  // Remove pairing.
  rpc DeletePairing(DeletePairingRequest) returns (DeletePairingResponse);
}

// Response of the `ReadLocalAddress` method.
message ReadLocalAddressResponse {
  // Local Bluetooth Device Address as array of 6 bytes.
  bytes address = 1;
}

// A Token representing an ACL connection.
// It's acquired via a Connect on the Host service.
message Connection {
  // Opaque value filled by the gRPC server, must not
  // be modified nor crafted.
  bytes cookie = 1;
}

// Request of the `Connect` method.
message ConnectRequest {
  // Peer Bluetooth Device Address as array of 6 bytes.
  bytes address = 1;
}

// Response of the `Connect` method.
message ConnectResponse {
  // Result of the `Connect` call:
  // - If successful: a Connection
  oneof result {
    Connection connection = 1;
  }
}

// Request of the `GetConnection` method.
message GetConnectionRequest {
  // Peer Bluetooth Device Address as array of 6 bytes.
  bytes address = 1;
}

// Response of the `GetConnection` method.
message GetConnectionResponse {
  // Result of the `GetConnection` call:
  // - If successful: a Connection
  oneof result {
    Connection connection = 1;
  }
}

// Request of the `WaitConnection` method.
message WaitConnectionRequest {
  // Peer Bluetooth Device Address as array of 6 bytes.
  bytes address = 1;
}

// Response of the `WaitConnection` method.
message WaitConnectionResponse {
  // Result of the `WaitConnection` call:
  // - If successful: a Connection
  oneof result {
    Connection connection = 1;
  }
}

// Request of the `Disconnect` method.
message DisconnectRequest {
  // Connection that should be disconnected.
  Connection connection = 1;
}

// Response of the `Disconnect` method.
message DisconnectResponse {}

// Request of the `ConnectLE` method
message ConnectLERequest {
  bytes address = 1;
}

// Response of the `ConnectLE` method
message ConnectLEResponse {
  oneof result {
      Connection connection = 1;
  }
}

// Request of the `DisconnectLE` method
message DisconnectLERequest {
  Connection connection = 1;
}

message PairingEvent {
  // Peer Bluetooth Device Address as array of 6 bytes.
  bytes address = 1;
  // Authentication method used for this pairing event
  oneof method {
    // "Just Works" Secure Simple Pairing association
    // model. Confirmation is automatic.
    google.protobuf.Empty just_works = 2;
    // Numeric Comparison Secure Simple Pairing association
    // model. Confirmation is required.
    uint32 numeric_comparison = 3;
    // Passkey Entry Secure Simple Pairing association model.
    // Passkey is shown to the user.
    // The peer device receives a Passkey Entry request.
    bytes passkey_entry_notification = 4;
    // Passkey Entry Secure Simple Pairing association model.
    // Passkey is typed by the user.
    google.protobuf.Empty passkey_entry_request = 5;
    // Legacy PIN Pairing.
    // A PIN Code is typed by the user.
    google.protobuf.Empty pin_code = 6;
  }
}

message PairingEventAnswer {
  // Received pairing event.
  PairingEvent event = 1;
  // Answer when needed to the pairing event method.
  oneof answer {
    // Numeric Comparison confirmation.
    // Used when pairing event method is `numeric_comparison`.
    bool confirm = 2;
    // Passkey typed by the user.
    // Used when pairing event method is `passkey_entry_request`.
    bytes passkey = 3;
    // Pin typed by the user.
    // Used when pairing event method is `pin_code`.
    uint32 pin = 4;
  };
}

// Request of the `DeletePairing` method.
message DeletePairingRequest {
  // Local Bluetooth Device Address as array of 6 bytes.
  bytes address = 1;
}

// Response of the `DeletePairing` method.
message DeletePairingResponse {}
