little_endian_packets

custom_field SizedCustomField : 8 "SizedCustomField"
custom_field UnsizedCustomField "UnsizedCustomField"
checksum Checksum : 8 "Checksum"

enum Enum7 : 7 {
    A = 1,
    B = 2,
}

struct SizedStruct {
    a: 8,
}

struct UnsizedStruct {
    _size_(array): 8,
    array: 8[],
}

// Bit fields

// The parser must be able to handle bit fields with scalar values
// up to 64 bits wide.  The parser should generate a static size guard.
packet Scalar_BitField {
    a: 7,
    c: 57,
}

// The parser must be able to handle bit fields with enum values
// up to 64 bits wide.  The parser should generate a static size guard.
packet Enum_BitField {
    a: Enum7,
    c: 57,
}

// The parser must be able to handle bit fields with reserved fields
// up to 64 bits wide.  The parser should generate a static size guard.
packet Reserved_BitField {
    a: 7,
    _reserved_: 2,
    c: 55,
}

// The parser must be able to handle bit fields with size fields
// up to 64 bits wide.  The parser should generate a static size guard.
packet Size_BitField {
    _size_(b): 7,
    a: 57,
    b: 8[],
}

// The parser must be able to handle bit fields with count fields
// up to 64 bits wide.  The parser should generate a static size guard.
packet Count_BitField {
    _count_(b): 7,
    a: 57,
    b: 8[],
}

// The parser must be able to handle bit fields with fixed scalar values
// up to 64 bits wide.  The parser should generate a static size guard.
packet FixedScalar_BitField {
    _fixed_ = 7 : 7,
    b: 57,
}

// The parser must be able to handle bit fields with fixed enum values
// up to 64 bits wide. The parser should generate a static size guard.
packet FixedEnum_BitField {
    _fixed_ = A : Enum7,
    b: 57,
}

// Checksum fields

// The parser must be able to handle checksum fields if the checksum value
// field is positioned at constant offset from the checksum start.
// The parser should generate a checksum guard for the buffer covered by the
// checksum.
packet Checksum_Field_FromStart {
    _checksum_start_(crc),
    a: 16,
    b: 16,
    crc: Checksum,
}

// The parser must be able to handle checksum fields if the checksum value
// field is positioned at constant offset from the end of the packet.
// The parser should generate a checksum guard for the buffer covered by the
// checksum.
packet Checksum_Field_FromEnd {
    _checksum_start_(crc),
    _payload_,
    crc: Checksum,
    a: 16,
    b: 16,
}

// Typedef fields

// The parser must be able to handle struct fields.
// The size guard is generated by the Struct parser.
packet Struct_Field {
    a: SizedStruct,
    b: UnsizedStruct,
}

// The parser must be able to handle padding fields.
// The parser should generate a static size guard.
packet Padding_Field {
    a: 8,
    _padding_ [1],
    b: 8,
}

// The parser must be able to handle custom fields of constant size.
// The parser should generate a static size guard.
packet Custom_Field_ConstantSize {
    a: SizedCustomField,
}

// The parser must be able to handle custom fields of undefined size.
// No size guard possible.
packet Custom_Field_VariableSize {
    a: UnsizedCustomField,
}

// Array fields

// Array with sized elements, and a variable count.
// The parser must extract as many elements as specified by the count from
// the remaining span. The parser should generate a dynamic array size guard.
packet Array_Field_SizedElement_VariableCount {
    _count_(array) : 8,
    array: 16[],
}

// The parser must extract as many elements as possible from
// the span with the specified size. The parser should generate a
// dynamic array size guard.
packet Array_Field_SizedElement_VariableSize {
    _size_(array) : 8,
    array: 16[],
}

// The parser must extract as many elements as specified by the
// static array count. The parser should generate a static array size guard.
packet Array_Field_SizedElement_ConstantSize {
    array: 16[8],
}

// The parser must extract as many elements as specified by the count from
// the remaining span. No size guard possible.
packet Array_Field_UnsizedElement_VariableCount {
    _count_(array) : 8,
    array: UnsizedStruct[],
}

// The parser must extract as many elements as possible from
// the span with the specified size. The parser should generate a
// dynamic array size guard.
packet Array_Field_UnsizedElement_VariableSize {
    _size_(array) : 8,
    array: UnsizedStruct[],
}

// The parser must extract as many elements as specified by the
// static array count. No size guard possible.
packet Array_Field_UnsizedElement_ConstantSize {
    array: UnsizedStruct[8],
}

// The parser must support complex size modifiers on arrays whose size is
// specified by a size field.
packet Array_Field_UnsizedElement_SizeModifier {
    _size_(array) : 8,
    array: UnsizedStruct[+8*2],
}

// The parser must support complex size modifiers on arrays whose size is
// specified by a count field.
packet Array_Field_UnsizedElement_CountModifier {
    _count_(array) : 8,
    array: UnsizedStruct[-8*2],
}
